#!/usr/bin/env python

# Author: Jannis Teunissen

# Description: Convert output of particle swarm to 2D transport data tables that
# can be used in to simulate streamers in magnetic fields

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import argparse
import numpy as np
import sys


def get_args():
    # Get and parse the command line arguments
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='''Convert particle swarm data to tables that can be used in discharge
        simulations with the local field approximation. Author: Jannis
        Teunissen, jannis@teunissen.net''',
        epilog='''Usage example: ./swarm_to_lfa.py table.txt AIR > lfa_data.txt''')
    parser.add_argument('in_file', type=argparse.FileType('r'),
                        help='File with output from swarm_cli')
    parser.add_argument('-magnetic', action='store_true',
                        help='Use local field approximation with B-field')
    return parser.parse_args()


def write_col(varname, name, multicol=False):
    ix_col = colnames.index(varname)

    print("efield[V/m]_" + name)
    if multicol:
        print("NUM_COLUMNS: ", n_angles)
        print("COL_VALUES: ", ' '.join(map(str, angles)))
    print("COMMENT: generated by particle_swarm")
    print("-----------------------")
    for i in range(n_fields):
        if multicol:
            ix = i*n_angles
            fld = td[ix, ix_E]
            vals = ["{:.4E}".format(val) for val in td[ix:ix+n_angles, ix_col]]
            print("{:.4E} {}".format(fld, ' '.join(vals)))
        else:
            fld = abs(td[i, ix_E])
            val = "{:.4E}".format(td[i, ix_col])
            print("{:.4E} {}".format(fld, val))
    print("-----------------------")
    print("")


if __name__ == '__main__':
    args = get_args()

    # Read header
    while True:
        hdr = args.in_file.readline()
        if hdr.startswith('# Column names:'):
            hdr = args.in_file.readline()
            # Strip comment and newline
            hdr = hdr[2:].strip()
            colnames = hdr.split(' ')
            break

    # Read data
    td = np.loadtxt(args.in_file)

    ix_E = colnames.index('E')
    n_fields = td.shape[0]

    write_col('mu_flux', 'mu[m2/Vs]')
    write_col('mu_bulk', 'mu_bulk[m2/Vs]')
    write_col('alpha', 'alpha[1/m]')
    write_col('eta', 'eta[1/m]')
    write_col('flux_D_z', 'dif[m2/s]')
    write_col('flux_D_x', 'difT[m2/s]')
    write_col('bulk_D_z', 'dif_bulk[m2/s]')
    write_col('bulk_D_x', 'difT_bulk[m2/s]')
    write_col('energy', 'energy[eV]')
