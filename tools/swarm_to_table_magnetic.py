#!/usr/bin/env python

# Author: Jannis Teunissen

# Description: Convert output of particle swarm to 2D transport data tables that
# can be used in to simulate streamers in magnetic fields

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import argparse
import numpy as np
import sys


def get_args():
    # Get and parse the command line arguments
    parser = argparse.ArgumentParser()

    parser.add_argument('in_file', type=argparse.FileType('r'),
                        help='File with output from swarm_cli')
    parser.add_argument('gas_name', type=str,
                        help='Gas mixture name (e.g., AIR)')
    return parser.parse_args()


def write_col(varname, name, angle=True):
    ix_col = colnames.index(varname)

    print("E[V/m]_" + name)
    print(args.gas_name)
    print("NUM_COLUMNS: ", n_angles)
    print("COL_VALUES: ", ' '.join(map(str, angles)))
    print("COMMENT: generated by particle_swarm")
    print("-----------------------")
    for i in range(n_fields):
        ix = i*n_angles
        fld = (td[ix, ix_Ey]**2 + td[ix, ix_Ez]**2)**0.5
        print(fld, ' '.join(map(str, td[ix:ix+n_angles, ix_col])))
    print("-----------------------")
    print("")


if __name__ == '__main__':
    args = get_args()

    # Read header
    hdr = args.in_file.readline()

    # Strip comment and newline
    hdr = hdr[2:].strip()
    colnames = hdr.split(' ')

    # Read data
    td = np.loadtxt(args.in_file)

    ix_Ey = colnames.index('Ey')
    ix_Ez = colnames.index('Ez')
    ix_angle = colnames.index('angle')
    angles = np.unique(td[:, ix_angle])
    n_fields = td.shape[0] // len(angles)
    n_angles = len(angles)

    # There should only be one magnetic field
    ix_Bz = colnames.index('Bz')

    if not np.allclose(td[:, ix_Bz], td[0, ix_Bz]):
        sys.exit("Error: more than one B-field present")

    write_col('mu_B', 'muB[m2/Vs]')
    write_col('mu_xB', 'muxB[m2/Vs]')
    write_col('mu_ExB', 'muExB[m2/Vs]')
    write_col('alpha', 'alpha[1/m]')
    write_col('eta', 'eta[1/m]')
    # Take the diffusion coefficient perpendicular to E and B
    write_col('diff_1', 'diff[m2/s]')
